name: Build and Deploy

on:
  push:
    branches:
      - 'test*'
    tags:
      - 'v*'

env:
  PLUGIN_NAME: "TelegramBridge"
  INTERNAL_VERSION: 0.0.1

jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Variables
        # Version is the tag name without the v
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v ]]; then
            version="${GITHUB_REF#refs/tags/v}"
          else
            version="$INTERNAL_VERSION"
          fi
          sed -i "s/<version>/$version/g" deploy/package.ini
          sed -i "s/<version>/$version/g" src/definitions.h
          sed -i "s/<plugin_name>/${{ env.PLUGIN_NAME }}/g" deploy/package.ini
          sed -i "s/<plugin_name>/${{ env.PLUGIN_NAME }}/g" CMakeLists.txt
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuild
          path: |
            deploy/package.ini
            src/definitions.h
            CMakeLists.txt
  
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch: x64
          - os: windows-2019
            arch: x86
          - os: ubuntu-latest
            arch: x64
          - os: macos-13
            arch: x64
    runs-on: ${{ matrix.os }}
    needs: prebuild
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: prebuild
          path: .
      - name: Setup MSVC (Windows only)
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-2019'
        with:
          arch: ${{ matrix.arch }}
          toolset: 14.0
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.15.2'
          target: 'desktop'
          arch: ${{ matrix.os == 'windows-2019' && (matrix.arch == 'x64' && 'win64_msvc2019_64' || 'win32_msvc2019' ) || (matrix.os == 'ubuntu-latest' && 'gcc_64' || 'clang_64') }}
          dir: '${{ github.workspace }}'
          cache: true
          cache-key-prefix: ${{ runner.os }}-${{ matrix.arch }}-Qt
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
      - name: Build
        run: |
          cmake ${{matrix.os == 'windows-2019' && '-A' || ''}} ${{matrix.os == 'windows-2019' && (matrix.arch == 'x64' && 'x64' || 'Win32') || '' }} .
          cmake --build . --config Release
      - name: Rename release (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          mv Release/${{ env.PLUGIN_NAME }}.dll ${{ env.PLUGIN_NAME }}_win${{ matrix.arch == 'x64' && '64' || '32' }}.dll
      - name: Rename release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv lib${{ env.PLUGIN_NAME }}.so ${{ env.PLUGIN_NAME }}_linux_amd64.so
      - name: Rename release (MacOS)
        if: matrix.os == 'macos-13'
        run: |
          mv lib${{ env.PLUGIN_NAME }}.dylib ${{ env.PLUGIN_NAME }}_mac.dylib
          install_name_tool -id ${{ env.PLUGIN_NAME }}_mac.dylib -change @rpath/QtWidgets.framework/Versions/5/QtWidgets @rpath/libQt5Widgets.dylib -change @rpath/QtGui.framework/Versions/5/QtGui @rpath/libQt5Gui.dylib -change @rpath/QtCore.framework/Versions/5/QtCore @rpath/libQt5Core.dylib ${{ env.PLUGIN_NAME }}_mac.dylib
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}${{ matrix.arch }}
          path: ${{ env.PLUGIN_NAME }}_[win|linux|mac]*.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download prebuild
        uses: actions/download-artifact@v4
        with:
          name: prebuild
          path: .
      - name: Remove old artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: prebuild
      - name: Create Tmp Folder
        run: |
          mkdir -p tmp
      - name: Collect artifacts
        uses: actions/download-artifact@v4
        with:
          path: tmp
      - name: Move artifacts to release
        run: |
          mv tmp/**/* deploy/plugins/
      - name: Install zip
        uses: montudor/action-zip@v1
      - name: Zip output
        run: zip -qq -r ../${{ env.PLUGIN_NAME }}.zip .
        working-directory: deploy
      - name: Rename release
        run: |
          mv ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}.${{ github.ref_name }}.ts3_plugin
      - name: Set draft flag based on tag
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v ]]; then
            echo "draft=false" >> $GITHUB_ENV
          else
            echo "draft=true" >> $GITHUB_ENV
          fi
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./${{ env.PLUGIN_NAME }}.${{ github.ref_name }}.ts3_plugin
          draft: ${{ env.draft }}
          prerelease: false